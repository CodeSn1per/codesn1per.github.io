<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>SpringSecurity - Tag - CodeSniper&#39; Blog</title>
        <link>https://codesn1per.github.io/tags/springsecurity/</link>
        <description>SpringSecurity - Tag - CodeSniper&#39; Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>codesniperrrrr@gmail.com (CodeSniper)</managingEditor>
            <webMaster>codesniperrrrr@gmail.com (CodeSniper)</webMaster><lastBuildDate>Sat, 02 Apr 2022 02:12:28 &#43;0800</lastBuildDate><atom:link href="https://codesn1per.github.io/tags/springsecurity/" rel="self" type="application/rss+xml" /><item>
    <title>SpringSecurity</title>
    <link>https://codesn1per.github.io/springsecurity/</link>
    <pubDate>Sat, 02 Apr 2022 02:12:28 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://codesn1per.github.io/springsecurity/</guid>
    <description><![CDATA[1.过滤器 security本质是一个过滤器链
  FilterSecurityInterceptor:是一个方法级的权限过滤器,基本位于过滤器链的最底部;
  ExceptionTranslationFilter:是一个异常过滤器,用来处理在认证授权过程中抛出的异常;
  UserNamePasswordAuthenticationFilter:对/Login的post请求拦截,校验表单中用户名和密码;
  2.web权限方案 1.认证   设置登录的用户名和密码
  通过配置文件
server.port=5555 spring.security.user.name=root spring.security.user.password=123456   通过配置类
@Configuration public class SecurityConfig extends WebSecurityConfigurerAdapter { @Bean PasswordEncoder passwordEncoder(){ return new BCryptPasswordEncoder(); } @Autowired private PasswordEncoder passwordEncoder; @Override protected void configure(AuthenticationManagerBuilder auth) throws Exception { String password = passwordEncoder.encode(&#34;123&#34;); auth.inMemoryAuthentication().withUser(&#34;root&#34;).password(password).roles(&#34;admin&#34;); } }   自定义编写实现类
@Configuration public class SecurityConfigTest extends WebSecurityConfigurerAdapter { @Autowired private UserDetailsService userDetailsService; @Bean PasswordEncoder passwordEncoder(){ return new BCryptPasswordEncoder(); } @Override protected void configure(AuthenticationManagerBuilder auth) throws Exception { auth.]]></description>
</item></channel>
</rss>
