<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - CodeSniper&#39; Blog</title>
        <link>https://codesn1per.github.io/posts/</link>
        <description>All Posts | CodeSniper&#39; Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>codesniperrrrr@gmail.com (CodeSniper)</managingEditor>
            <webMaster>codesniperrrrr@gmail.com (CodeSniper)</webMaster><lastBuildDate>Fri, 29 Apr 2022 00:43:57 &#43;0800</lastBuildDate><atom:link href="https://codesn1per.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>详细设计</title>
    <link>https://codesn1per.github.io/%E8%AF%A6%E7%BB%86%E8%AE%BE%E8%AE%A1/</link>
    <pubDate>Fri, 29 Apr 2022 00:43:57 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://codesn1per.github.io/%E8%AF%A6%E7%BB%86%E8%AE%BE%E8%AE%A1/</guid>
    <description><![CDATA[1. 用户管理 1.1 用户列表 根据登录名称,手机号码,用户状态,创建时间,和学校等参数分页查询用户数据,返回用户列表.
  controller层代码
  mapper层代码
  页面截图
  1.2 用户新增 根据用户填入的信息,创建该用户.赋予一个默认的登录密码;
  controller层代码
  mapper层代码
  页面截图
  2. 角色管理 2.1 角色列表 根据角色名称,权限字符,角色状态,创建时间查询符合条件的用户信息,可以新增,修改,删除和导出这些数据.
  controller层代码
  mapper层代码
  页面截图
  2.2 角色新增 根据管理员传入的角色信息,去创建新的角色,并赋予对应的菜单权限.
  controller层代码
  mapper层代码
  页面截图
  3 菜单管理 3.1 菜单列表 根据菜单名称,菜单状态搜索对应的菜单,管理员用户对菜单进行新增,修改和删除操作.
  controller层代码
  mapper层代码]]></description>
</item><item>
    <title>SpringBoot整合ES</title>
    <link>https://codesn1per.github.io/springboot%E6%95%B4%E5%90%88es/</link>
    <pubDate>Thu, 28 Apr 2022 02:42:27 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://codesn1per.github.io/springboot%E6%95%B4%E5%90%88es/</guid>
    <description><![CDATA[1. 添加依赖 &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-elasticsearch&lt;/artifactId&gt; &lt;/dependency&gt; 2. 配置客户端 @Configuration public class RestClientConfig extends AbstractElasticsearchConfiguration { @Value(&#34;${elasticsearch.host}&#34;) private String host; @Override @Bean public RestHighLevelClient elasticsearchClient() { final ClientConfiguration clientConfiguration = ClientConfiguration.builder() .connectedTo(host).build(); return RestClients.create(clientConfiguration).rest(); } } # ES主机端口elasticsearch:host:127.0.0.1:92003. 客户端对象  ElasticsearchOperations RestHighLevelClient (推荐)  1. ElasticsearchOperations 特点: 始终使用面向对象方式操作ES
相关注解:
@Data @Document(indexName = &#34;product&#34;,createIndex = true) public class Product { @Id private String id; @Field(type = FieldType.Keyword) private String title; @Field(type = FieldType.]]></description>
</item><item>
    <title>ElasticSearch学习</title>
    <link>https://codesn1per.github.io/elasticsearch%E5%AD%A6%E4%B9%A0/</link>
    <pubDate>Wed, 27 Apr 2022 03:00:14 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://codesn1per.github.io/elasticsearch%E5%AD%A6%E4%B9%A0/</guid>
    <description><![CDATA[1. 什么是ElasticSearch ElasticSearch简称es,是一个开源的分布式全文检索引擎,他可以近乎实时的存储,检索数据;本身拓展性很好,可以拓展到上百台服务器,处理PB级别的数据.es也使用java开发并使用lucene作为核心来实现所有的所有和搜索的功能,但是他的目的是通过简单的Restful API来隐藏Lucene的复杂性,从而让全文搜索变的简单.
2. ElasticSearch概念 2.1 概述 ElasticSearch是面向文档(document oriented)的,这意味着他可以存储整个对象或文档.然而他不仅是存储,还会索引(index)每个文档的内容使之可以被搜索.在ElasticSearch中,你可以对文档(而非成行成列的数据)进行索引,搜索,排序,过滤.与关系型数据库对比如下:
Relational DB -&gt; Databases -&gt; Tables - &gt; Rows -&gt; COlumns ElasticSearch - &gt; Indices -&gt; Types -&gt; Documents -&gt; Fields 2.2 索引-index 一个索引就是一个拥有积分相似特征的文档的集合.比如说,你可以有一个客户数据的索引,另一个产品目录的索引,还有一个订单数据的索引.一个索引由一个名字来标识(必须全部是小写字母的),并且当我们要对对应于这个索引中的文档进行索引,搜索,更新和删除的时候,都要使用到这个名字.在一个集群中,可以定义人一多的索引.
2.3 类型-type 在一个索引中,你可以定义一种或多种类型,一个类型是你的索引的一个逻辑上的分类/分区,其寓意完全由你来定.通常,会为具有一组共同字段的的文档定义一个类型.比如,我们假设你运营一个博客并且将你所有的数据存储到一个索引中.在这个索引中,你可以为用户数据定义一个类型,为博客数据定义另一个类型,当然,也可以为评论数据定义另一个类型.
2.4 字段-Field 相当于是数据表的字段.对文档数据根据不同属性进行的分类标识
2.5 映射-mapping mapping是处理数据的方式和规则方面做一些限制,如某个字段的数据类型,默认值,分析器,是否被索引等,这些都是映射里面可以设置的,其他就是处理es里面的数据一些使用葛泽设置也叫做映射.俺这最优规则处理数据对性能提升很大.
2.6 文档-doucument 一个文档是一个可被索引的基础信息单元,在一个index/type里面,你可以存储人一多的文档.注意,尽管一个文档,物理上存在于一个索引之中,文档必须被索引/赋予一个索引的type.
2.7 接近实时-NRT es是一个接近实时的搜索平台.这意味着,从索引一个文档直到这个文档能够被搜索到有一个轻微的延迟.
3. 索引操作 3.1 创建索引 postman发送put请求 127.0.0.1:9200/shopping
3.2 查看索引 postman发送get请求 127.0.0.1:9200/shopping
查看所有索引: 127.0.0.1:9200/_cat/indices?v
4. 文档操作 4.1 创建文档 postman发送post请求 127.0.0.1:9200/shopping/_doc
{ &#34;title&#34;:&#34;小米手机&#34;, &#34;category&#34;:&#34;手机&#34;, &#34;price&#34;:4999 } 4.]]></description>
</item><item>
    <title>面试题目整理</title>
    <link>https://codesn1per.github.io/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E6%95%B4%E7%90%86/</link>
    <pubDate>Wed, 06 Apr 2022 15:35:22 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://codesn1per.github.io/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E6%95%B4%E7%90%86/</guid>
    <description><![CDATA[1. JavaSE StringBuffer,StringBuilder区别?  两者都是可变的字符串对象,有共同的父类AbstractStringBuilder,并且两个类的构造方法和成员方法也基本相同,不同的是,StringBuffer是线程安全的,而StringBUilder是非线程安全的,所以StringBuilder性能略高  2. Spring Spring是什么?   轻量级开源JavaEE框架,它是一个容器框架,用来装javabean,中间层框架可以起一个连接作用,可以让我们企业开发更快速,更简洁.
  Spring中比较核心的是IOC(控制反转)和AOP(面向切面编程)
   IOC可以帮助我们维护对象与对象之间的依赖关系,降低了对象之间的耦合度,DI是依赖注入的意思,他是IOC实现的方式,指应用运行过程中,对象之间的关系不再需要对象的使用者来维护,而是被IOC容器进行管理注入 AOP是面向切面编程,是对OOP的补充,可以同一解决一批组件的共性需求(如权限检查,记录日志,事务管理等).我们可以将解决共性需求的代码独立出来,通过配置的方式,声明这些代码在什么地方,什么时机调用.满足调用条件,AOP会将业务代码织入到我们指定的位置,从而同一解决问题,不需要修改这一批组件的代码  BeanFactory和ApplicationContext有什么区别?  ApplicationContext是BeanFacotry的子接口 ApplicationContext提供更完整的功能:  继承MessageSource,支持国际化 同一的资源文件访问方式 提供在监听器中注册bean的事件 同时加载多个配置文件   BeanFactory采用延迟加载形式来注入Bean的,即只有使用某个Bean时,才对该Bean进行加载实例化.如果Bean的某一个属性没有注入,BeanFactory加载后,知道第一次使用这个Bean才会抛出异常 ApplicationContext是在容器启动时,一次性创建所有的bean,在启动时就可以发现spring中存在的配置问题,这样有利于检查所依赖属性是否注入.  两者都都支持BeanPostProcessor,BeanFactoryPostProcessor的使用,但两者的区别是:BeanFactory需要手动注册,而ApplicationContext则是自动注册    SpringBean的生命周期?   Spring中的bean的生命主要包含四个阶段:实例化Bean-&gt;Bean属性填充-&gt;初始化Bean-&gt;销毁Bean
  首先是实例化Bean,当客户端想容器请求一个尚未初始化的bean时,或初始化bean的时候需要注入另一个尚未初始化的bean的依赖时,容器就会调用doCreatebean()方法进行实例化,实际上就是通过反射的方式创建出一个bean对象
  Bean实例创建出来后,接着就是给这个bean对象进行属性填充,也就是注入这个bean依赖的其他bean对象
  属性填充完成后,进行初始化Bean操作,初始化阶段可以分为几个步骤
  执行Aware接口的方法
Spring会检测该对象是否实现了xxxAware接口,通过Aware类型的接口,可以让我们拿到Spring容器的一些资源.如实现BeanNameAware接口可以获取到BeanName,实现BeanFactoryAware接口可以获取工厂对象BeanFactory等等
  执行BeanPostProcessor的前置处理方法PostProcessbeforeInitiaization(),对bean进行一些自定义的前置处理
  判断bean是否实现了initializingBean接口,如果实现了,将会执行initializingBean的afterPropertiesSet()初始化方法
  执行用户自定义的初始化方法,如init-method等
  执行BeanPostProcessor的后置处理方法postProcessAfterInitialization()
    初始化完成后,Bean就成功创建了,之后就可以使用这个bean,当bean不在需要时,会进行销毁操作]]></description>
</item><item>
    <title>SpringSecurity</title>
    <link>https://codesn1per.github.io/springsecurity/</link>
    <pubDate>Sat, 02 Apr 2022 02:12:28 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://codesn1per.github.io/springsecurity/</guid>
    <description><![CDATA[1.过滤器 security本质是一个过滤器链
  FilterSecurityInterceptor:是一个方法级的权限过滤器,基本位于过滤器链的最底部;
  ExceptionTranslationFilter:是一个异常过滤器,用来处理在认证授权过程中抛出的异常;
  UserNamePasswordAuthenticationFilter:对/Login的post请求拦截,校验表单中用户名和密码;
  2.web权限方案 1.认证   设置登录的用户名和密码
  通过配置文件
server.port=5555 spring.security.user.name=root spring.security.user.password=123456   通过配置类
@Configuration public class SecurityConfig extends WebSecurityConfigurerAdapter { @Bean PasswordEncoder passwordEncoder(){ return new BCryptPasswordEncoder(); } @Autowired private PasswordEncoder passwordEncoder; @Override protected void configure(AuthenticationManagerBuilder auth) throws Exception { String password = passwordEncoder.encode(&#34;123&#34;); auth.inMemoryAuthentication().withUser(&#34;root&#34;).password(password).roles(&#34;admin&#34;); } }   自定义编写实现类
@Configuration public class SecurityConfigTest extends WebSecurityConfigurerAdapter { @Autowired private UserDetailsService userDetailsService; @Bean PasswordEncoder passwordEncoder(){ return new BCryptPasswordEncoder(); } @Override protected void configure(AuthenticationManagerBuilder auth) throws Exception { auth.]]></description>
</item><item>
    <title>MySQL锁机制</title>
    <link>https://codesn1per.github.io/mysql%E9%94%81%E6%9C%BA%E5%88%B6/</link>
    <pubDate>Sat, 02 Apr 2022 01:46:41 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://codesn1per.github.io/mysql%E9%94%81%E6%9C%BA%E5%88%B6/</guid>
    <description><![CDATA[1. 锁的分类  共享锁 Share Lock (简称S锁,属于行锁) 排它锁 Exclusive Locks (简称X锁,属于行锁) 意向共享锁 Intention Shared Locks (简称IS锁,属于表锁) 意向排他锁 Intention Exclusive Locks (简称IX锁,属于表锁) 自增锁 AUTO-INC Locks  2. 共享锁  共享锁就是多个事务对同一数据可以共享一把锁,都能访问到数据库,但是只能读不能修改
  事务A: select * from student where id = 1 lock in share mode;
事务B: select * from student where id = 1 (读数据没有问题)
事务B: update student set name = &ldquo;haha&rdquo; where id = 1
注意: 无法修改会卡死,当事务A提交事务之后,会立刻修改成功
 3. 排它锁  排它锁不能与其他锁并存,如一个事务获取了一个数据行的排它锁,其他事务就不能再获取该行的锁,只有当前获取了排它锁的事务可以对数据进行读取和修改]]></description>
</item><item>
    <title>Spring事务失效情况</title>
    <link>https://codesn1per.github.io/spring%E4%BA%8B%E5%8A%A1%E5%A4%B1%E6%95%88%E6%83%85%E5%86%B5/</link>
    <pubDate>Sun, 27 Mar 2022 22:24:16 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://codesn1per.github.io/spring%E4%BA%8B%E5%8A%A1%E5%A4%B1%E6%95%88%E6%83%85%E5%86%B5/</guid>
    <description><![CDATA[1. 抛出检查异常导致事务不能正确回滚  **原因: **Srping默认只会回滚非检查异常
  解法: 配置rollbackFor属性
 2. 业务方法内自己try-catch异常导致事务不能正确回滚  原因: 事务通知只有捕捉到了目标抛出的异常,才能进行后续的回滚处理,如果目标自己处理异常,事务通知无法获悉
  解法: 1. 异常原样抛出; 2. 手动设置TransactionStatus.setRollbackOnly();
 3. aop切面顺序导致事务不能正确回滚  原因: 事务切面优先级最低,但如果自定义的切面优先级和他一样,则还是自定义切面在内层,这时若自定义切面没有抛出异常
  解法: 同情况2
 4. 非public方法导致的事务失效  原因: Spring为方法创建代理,添加事务通知,前提条件都是该方法是public
  解法: 改为public方法
 5. 父子容器导致的事务失效  原因: 子容器扫描范围过大,把未加事务配置的service扫描进来
  解法: 1. 各扫描各的,不要图简便; 2. 不要用父子容器,所有bean放在同一容器
 6. 调用本类方法导致传播行为失效  原因: 奔雷方法调用不经过代理,因此无法增强
  **解法: **1. 依赖注入自己(代理)来调用; 2. 通过AopContext拿到代理对象,来调用; 3. 通过CTW,LTW实现功能增强]]></description>
</item><item>
    <title>SpringBean的生命周期</title>
    <link>https://codesn1per.github.io/springbean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</link>
    <pubDate>Sun, 27 Mar 2022 13:14:08 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://codesn1per.github.io/springbean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</guid>
    <description><![CDATA[阶段一: 处理名称,检查缓存 阶段二: 检查父工厂 阶段三: 检查DependsOn 阶段四: 按Scope创建bean  创建singleton 创建prototype 创建其他scope   阶段五: 创建bean  创建bean实例 依赖注入 初始化 登记可销毁bean   阶段六: 类型转换 阶段七: 销毁bean  阶段一: 处理名称,检查缓存  先把别名解析为实际名称,再进行后续处理 若要FactoryBean本身,需要使用&amp;名称获取 singletonObjects是一级缓存,放单例成品对象 singletonFactories是三级缓存,放单例工厂 earlySingletonObjects是耳机缓存,放单例工厂的产品,可成为提前单例对象  阶段二: 处理父子容器 阶段三: 阶段四: 按Scope创建bean  scope理解为从xxx范围内找到bean更加贴切 singleton scope表示从单例池范围获取bean,如果没有,则创建并放入单例池 prototype scope表示从不缓存bean,每次都创建新的 request scope表示从request对象范围内获取bean,如果没有,则创建并放入request  阶段五: 创建bean 1. 创建bean实例   FactoryMethod方式创建bean实例
 分成静态工厂与实例工厂 工厂方法若有参数,需要对工厂方法参数进行解析,利用resolveDependency 如果有多个工厂方法候选者,还要进一步按权重筛选    AutowiredAnnotationBeanPostProcessor
 优先选择带@Autowired注解的构造 若有唯一的带参构造,也会入选    才有默认构造]]></description>
</item><item>
    <title>Aop</title>
    <link>https://codesn1per.github.io/aop/</link>
    <pubDate>Wed, 16 Mar 2022 18:47:34 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://codesn1per.github.io/aop/</guid>
    <description><![CDATA[AOP是什么   AOP(Aspect Oriented Programming),意味面向切面编程,可以通过预编译方式和运行期动态代理实现在不修改源代码的情况下给程序动态同一添加功能的一种技术.
  AOP的编程思想就是把很多类对象的横切问题点,从业务逻辑中分离出来,从而达到解耦的目的,增加代码的重用性,提高开发效率
  AOP应用场景  日志记录 异常处理 权限验证 缓存处理 事务处理 数据持久化 效率检查 内容分发  Aspect概念  aspect:切面,切面有切点和通知组成,即包括横切逻辑的定义也包括连接点的定义 pointcut: 切点,每个类都拥有多个连接点,可以理解是连接点的集合 joinpoint: 连接点,程序执行的某个特定位置,如某个方法调用前后等 weaving: 织入,将增强添加到目标类的具体连接点的过程 advice: 通知,是织入到目标类连接点上的一段代码,就是增强到什么地方?增强什么内容? target: 目标对象,通知织入的目标类 aop Proxy: 代理对象,即增强后产生的对象  Spring AOP底层实现,是通过JDK动态代理或CGlib代理在运行时期在对象初始化阶段织入代码的
   Before advice
前置通知,即在目标方法调用之前执行.注意: 无论方法是否遇到异常都执行
  After returning advice
后置通知,在目标方法执行后执行,前提是目标方法没有遇到异常,如果有异常则不执行通知
  After throwing advice
异常通知,在目标方法抛出异常时执行,可以获取异常信息
  After finally advice
最终通知,在目标方法执行后执行,无论是否是异常执行
  Around advice]]></description>
</item><item>
    <title>面试题</title>
    <link>https://codesn1per.github.io/%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
    <pubDate>Thu, 10 Mar 2022 16:57:05 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://codesn1per.github.io/%E9%9D%A2%E8%AF%95%E9%A2%98/</guid>
    <description><![CDATA[springmvc执行流程 数据参数在handler处理 mybatis 分页插件如何实现 动态sql如何写 方法和sql如何绑定 先namespace 线程 进程关系 线程的状态 6种 interipped notify all区别 线程安全 写 锁机制 new创建字符串 syn锁升级 反射可以获取私有信息吗 需要设置一下setaccess 自定义注解 多态的理解 封装 treeset如何去重 compareto 数组链表区别 序列化 反序列化 Spring如何为我们创建对象 动态代理 Springbean生命周期 init aware 对象作用域 threadlocal 私有化 线程隔离 底层机制 threallocalmap k v Spring 如何解决循环依赖 三级缓存 linux的常用 ps -ef 进程号 kill 全局找一个文件 find 动态查看日志 tail f 动态 n 末尾多少行 数据库隔离级别 读未提交 读以提交 可重复读 串行化 存储引擎 sql语句执行过程 先执行from
hashmap循环链表
1.你怎么理解线程的优先级？ 2.线程之间是如何通信的？ 3.线程池怎么配置的？ 4、并发编程的三要素是什么？ 5、hashmap的底层原理？ 6、ArrayList和 LinkedList 的区别在哪里？ 7、我们常说spring全家桶，他包含哪些部分？ 8、能说一下基于XML配置方式的搭建SSM框架的步骤嘛？ 9、如果数据库表锁了，数据插入不了，怎么办？ 10、 mysql 的存储引擎有哪些，区别是什么 11、maven有哪些优缺点，如何解决jar包的冲突？ 12、能说一下常用的linux部署命令嘛？]]></description>
</item></channel>
</rss>
