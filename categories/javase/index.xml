<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>JavaSE - Category - CodeSniper&#39; Blog</title>
        <link>https://codesn1per.github.io/categories/javase/</link>
        <description>JavaSE - Category - CodeSniper&#39; Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>codesniperrrrr@gmail.com (CodeSniper)</managingEditor>
            <webMaster>codesniperrrrr@gmail.com (CodeSniper)</webMaster><lastBuildDate>Fri, 02 Apr 2021 02:00:09 &#43;0800</lastBuildDate><atom:link href="https://codesn1per.github.io/categories/javase/" rel="self" type="application/rss+xml" /><item>
    <title>IO流</title>
    <link>https://codesn1per.github.io/io%E6%B5%81/</link>
    <pubDate>Fri, 02 Apr 2021 02:00:09 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://codesn1per.github.io/io%E6%B5%81/</guid>
    <description><![CDATA[1. 文件 1. 什么是文件? 保存数据的地方
2. 文件流 文件在程序中是以流的形式来操作的
流: 数据在数据源(文件)和程序(内存)之间经历的路径
输入流: 数据从数据源(文件)到程序(内存)的路径
输出流: 数据从程序(内存)到数据源(文件)的路径
3. 常用文件操作  new File(String pathname) //根据路径创建一个File对象 new File(File parent,String child) //根据父目录文件+子路径创建 new File(String parent,String child) //根据父目录+子路径构建 createNewFile 创建文件 getName,getAbsoutePath,getParent,length,exists,isFile,isDirectory mkdir:创建一级目录,mkdirs: 创建多级目录,delete:删除空目录或文件  2. IO流原理及流的分类 1. io流原理  I/O是input/output的缩写,I/O技术是非常实用的技术,用于处理数据传输,如读写文件,网络通信等; java程序中,对于数据的输入/输出操作以流(stream)的方式进行; java.io包下提供各种&quot;流&quot;类和接口,用以获取不同种类的数据,并通过方法输入或输出数据; 输入input:读取外部数据(磁盘,光盘等存储设备的数据)到程序(内存)中; 输出output:将程序数据输出到磁盘,光盘等存储设备中;  2. 流的分类   按操作数据单位不同分为: 字节流(8bit) 二进制文件,字符流(按字符) 文本文件;
  按数据流的流向不同分为: 输入流,输出流
  按流的角色的不同分为: 节点流,处理流/包装流
 java的IO流共设计40多个类,实际上非常规则,都是从如上4个抽象基类派生的. 由这四个类派生出来的子类名称都是以其父类作为子类名后缀;    3.]]></description>
</item><item>
    <title>反射</title>
    <link>https://codesn1per.github.io/%E5%8F%8D%E5%B0%84/</link>
    <pubDate>Mon, 02 Nov 2020 02:09:50 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://codesn1per.github.io/%E5%8F%8D%E5%B0%84/</guid>
    <description><![CDATA[1. 反射机制 1. 介绍  反射机制允许程序在执行期借助ReflectionAPI取得任何类的内部信息(比如成员变量,构造方法,成员方法等等),并能操作对象的属性及方法.反射在设计模式和框架底层都会用到; 加载完类后,在堆中就产生了一个Class类型的对象(一个类只有一个Class对象),这个对象包含了类的完整结构信息.通过这个对象得到类的结构.这个对象就像一面镜子,透过这个镜子看到类的结构,所以,形象的称为反射;  2. 原理示意图 3. 反射机制作用  在运行时判断任意一个对象所属的类 在运行时构造任意一个类的对象 在运行时得到任意一个类所具有的成员变量和方法 在运行时调用任意一个对象的成员变量和方法 生成动态代理  4. 反射相关的主要类 5. 反射的有点和缺点  优点: 可以动态的创建和使用对象(也是框架底层核心),使用灵活,没有反射机制,框架技术就失去底层支撑; 缺点: 使用反射基本是解释执行,对执行速度有影响;  6. 反射调用优化-关闭访问检查  Method和Field,Constructor对象都有setAccessible()方法; setAccessible作用是启动和禁用访问安全检查的开关; 参数值为true表示反射的对象在使用时取消访问检查,提高反射的效率,参数值为false则表示反射的对象执行访问检查;  2. Class类 1. 基本介绍   Class也是类,因此也继承Object类;
  Class类对象不是new出来的,而是系统创建的;
  对于某个类的Class类对象,在内存中只有一份,因为类只加载一次;
  每个类的实例都会记得自己是由哪个Class实例所生成;
  通过Class可以完整的得到一个类的完整结构,通过一系列API
  Class对象时存放在堆的
  类的字节码二进制数据,是放在方法区的,有点地方称为类的元数据;
  2. 获取Class类对象 1. Class.forName()  前提:已知一个类的全类名,且该类路径下,可通过Class类的静态方法forName()获取,可能抛出ClassNotFoundException 应用场景:多用于配置文件,读取类全路径,加载类;  2.]]></description>
</item></channel>
</rss>
