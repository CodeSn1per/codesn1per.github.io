<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Spring - Category - CodeSniper&#39; Blog</title>
        <link>https://codesn1per.github.io/categories/spring/</link>
        <description>Spring - Category - CodeSniper&#39; Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>codesniperrrrr@gmail.com (CodeSniper)</managingEditor>
            <webMaster>codesniperrrrr@gmail.com (CodeSniper)</webMaster><lastBuildDate>Wed, 16 Mar 2022 18:47:34 &#43;0800</lastBuildDate><atom:link href="https://codesn1per.github.io/categories/spring/" rel="self" type="application/rss+xml" /><item>
    <title>Aop</title>
    <link>https://codesn1per.github.io/aop/</link>
    <pubDate>Wed, 16 Mar 2022 18:47:34 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://codesn1per.github.io/aop/</guid>
    <description><![CDATA[AOP是什么   AOP(Aspect Oriented Programming),意味面向切面编程,可以通过预编译方式和运行期动态代理实现在不修改源代码的情况下给程序动态同一添加功能的一种技术.
  AOP的编程思想就是把很多类对象的横切问题点,从业务逻辑中分离出来,从而达到解耦的目的,增加代码的重用性,提高开发效率
  AOP应用场景  日志记录 异常处理 权限验证 缓存处理 事务处理 数据持久化 效率检查 内容分发  Aspect概念  aspect:切面,切面有切点和通知组成,即包括横切逻辑的定义也包括连接点的定义 pointcut: 切点,每个类都拥有多个连接点,可以理解是连接点的集合 joinpoint: 连接点,程序执行的某个特定位置,如某个方法调用前后等 weaving: 织入,将增强添加到目标类的具体连接点的过程 advice: 通知,是织入到目标类连接点上的一段代码,就是增强到什么地方?增强什么内容? target: 目标对象,通知织入的目标类 aop Proxy: 代理对象,即增强后产生的对象  Spring AOP底层实现,是通过JDK动态代理或CGlib代理在运行时期在对象初始化阶段织入代码的
   Before advice
前置通知,即在目标方法调用之前执行.注意: 无论方法是否遇到异常都执行
  After returning advice
后置通知,在目标方法执行后执行,前提是目标方法没有遇到异常,如果有异常则不执行通知
  After throwing advice
异常通知,在目标方法抛出异常时执行,可以获取异常信息
  After finally advice
最终通知,在目标方法执行后执行,无论是否是异常执行
  Around advice]]></description>
</item><item>
    <title>动态代理</title>
    <link>https://codesn1per.github.io/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</link>
    <pubDate>Wed, 16 Mar 2022 12:57:14 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://codesn1per.github.io/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</guid>
    <description><![CDATA[1. 动态代理的实现 1. jdk动态代理:   使用java反射包中的类和接口实现动态代理的功能 反射包 java.lang.reflect,里面有三个类:InvocationHandler,Method,Proxy   2. cglib动态代理   cglib是第三方的工具库,创建代理对象. cglib的原理是继承,cglib通过继承目标类,创建他的子类,在子类中重写父类中同名的方法,实现功能的修改. 因为cglib是继承,重写方法,所以要求目标类不能是final的,方法也不能是final的   2. jdk动态代理 1. 反射,Method类,表示方法,类中的方法.通过Method可以执行某个方法. 2. jdk动态代理的实现  InvocationHandler
  就一个方法invoke()
  invoke():表示代理对象要执行的功能代码,你的代理类要完成的功能卸载invoke()方法中.
  方法原型:
参数: Object proxy: jdk创建的代理对象,无需赋值
Method method: 目标类中的方法,jdk提供method对象的
Object[] args: 目标类中的方法的参数,jdk提供
    Method
 表示方法的,确切的说是目标类中的方法 通过Mehtod可以执行某一个目标类的方法,Method.invoke()    Proxy
 核心的对象,创建的代理对象,之前创建对象都是用new类的构造方法(),现在使用Proxy类的方法,代替new的使用 静态方法:newProxyInstance(),创建代理对象 参数:  classLoader loader: 类加载器,负责向内存中加载对象的.使用反射获取对象的ClassLoader Class&lt;?&gt;[] interfaces: 接口,目标对象实现的接口,也是反射获取的 InvocationHander h: 我们自己写的,代理类要完成的功能     ]]></description>
</item></channel>
</rss>
